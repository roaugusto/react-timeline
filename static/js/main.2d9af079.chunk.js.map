{"version":3,"sources":["../../src/styles/theme.ts","../../src/styles/global.ts","../../src/styles.ts","../../src/components/Task/styles.ts","../../src/components/Task/index.tsx","../../src/index.tsx","test/tasks.tsx","App.tsx","index.tsx"],"names":["defaultTheme","background","letters","completed","inprogress","planned","timeline","createGlobalStyle","Container","styled","Content","Square","props","css","SubtitleStyled","RowStyled","TimelineStyled","ItemDiv","Item","DayEvolution","DayEvolutionLabel","FirstMonthLabel","MonthLabel","DayLabel","MarginMonth","marginColorsVariations","dayBarColorsVariations","MarginDay","DayTask","DayBar","DescDay","DescTask","TaskContent","Task","dateBase","startDate","finishDate","description","position","qtyDays","widthDay","widthBar","type","taskPosition","daysLabel","backgroundColor","daysFromStart","width","format","parseISO","text","React","isAfter","totPeriods","weeksPerPeriod","tasks","typeDraw","locale","labels","currentLocale","currentLabels","useState","datesBase","rangeDates","tasks1","tasks2","totEvol","totalHeigh","widthContainer","marginTop","listTasks1","listTasks2","daysPerPeriods","currentDaysLabel","dataTimeline","setDataTimeline","updateTimeline","lstTasks","firstMon","addDays","startOfWeek","firstDate","subDays","i","date","newDate","diff","differenceInDays","lastDate","lastDrawingDate","diffTotal","formatTask","listTaskFormatted","heigh","positionTask","spaceInitial","positionsTasks","line","pos","list","processDate","nextDate","selectedTask","isEqual","item","findIndex","lenDesc","Math","lenNext","totPositions","found","j","id","maxTopPosition","maxBottomPosition","useEffect","style","height","maxWidth","key","color","display","flexDirection","zIndex","App","setId","Date","date1","setNewDate1","date2","setNewDate2","listTasks","setListTasks","dateBasePreview","setDateBasePreview","periods","setPeriods","weeks","setWeeks","setPosition","setTypeDraw","setBackground","margin","marginLeft","dateFormat","placeholderText","selected","onChange","value","e","Number","target","tpDraw","paddingLeft","paddingRight","onClick","newId","newDate1","newDate2","newTask","toString","state","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2d9af079.chunk.js","sourcesContent":["export const defaultTheme = {\n  colors: {\n    background: '#f0f0f5',\n    letters: '#FFF',\n    completed: '#1aaa42',\n    inprogress: '#a5a5a5',\n    planned: '#02b2ee',\n    timeline: '#737373',\n  },\n};\n","import { createGlobalStyle } from 'styled-components';\n\nimport { defaultTheme } from './theme';\n\nexport default createGlobalStyle`\n  *{\n    margin: 0;\n    padding:0;\n    outline: 0;\n    box-sizing: border-box\n  }\n\n  body{\n    background: ${defaultTheme.colors.background};\n    color:  ${defaultTheme.colors.letters};\n    -webkit-font-smoothing: antialiased;\n  }\n\n  body, input, button {\n    font-family: Arial, Helvetica, sans-serif\t;\n    font-size: 16px;\n  }\n\n  h1, h2, h3, h4, h5, h6, strong {\n    font-weight: 500;\n  }\n\n  button {\n    cursor: pointer;\n  }\n\n  .react-confirm-alert {\n    margin: 20px;\n  }\n\n  .react-confirm-alert-body {\n    width: auto;\n    h1{\n      font-size: 22px;\n      color: #363f5f;\n      margin-bottom: 10px;\n    }\n\n    .react-confirm-alert-button-group {\n      button:first-child {\n        background: #e83f5b;\n      }\n      button:last-child {\n        background: #fff;\n        color: #3e3b47;\n        border: 1px solid #3e3b47;\n      }\n    }\n  }\n\n\n`;\n","import styled, { css } from 'styled-components';\nimport { defaultTheme } from './styles/theme';\n\ninterface DayEvolutionProps {\n  width: string;\n  backgroundColor?: string;\n}\n\ninterface MonthLabelProps {\n  backgroundColor?: string;\n}\n\ninterface WidthProps {\n  width: number;\n}\n\ninterface SquareProps {\n  color: string;\n}\n\nexport const Container = styled.div`\n  display: block;\n  margin: auto auto;\n  padding: 10px;\n`;\n\nexport const Content = styled.div`\n  display: block;\n  margin: auto auto;\n`;\n\nexport const Square = styled.span<SquareProps>`\n  height: 10px;\n  width: 10px;\n  background-color: #555;\n  margin-right: 5px;\n  background-color: ${(props) => props.color};\n\n  ${(props) =>\n    props.color === '0' &&\n    css`\n      background-color: ${defaultTheme.colors.completed};\n    `}\n  ${(props) =>\n    props.color === '1' &&\n    css`\n      background-color: ${defaultTheme.colors.inprogress};\n    `}\n  ${(props) =>\n    props.color === '2' &&\n    css`\n      background-color: ${defaultTheme.colors.planned};\n    `}\n`;\n\nexport const SubtitleStyled = styled.div`\n  display: flex;\n  flex-direction: row;\n  color: #737373;\n  margin: auto auto;\n  padding-top: 10px;\n  align-items: center;\n\n  div {\n    margin-right: 20px;\n    font-size: 14px;\n  }\n`;\n\nexport const RowStyled = styled.div<WidthProps>`\n  display: flex;\n  flex-direction: row;\n  width: ${(props) => `${props.width}px`};\n`;\n\nexport const TimelineStyled = styled.div`\n  display: flex;\n  flex-direction: row;\n\n  padding: 50px 30px;\n\n  list-style-type: none;\n  padding: 0;\n  margin: 0;\n`;\n\nexport const ItemDiv = styled.span`\n  color: #fff;\n  background: #737373;\n  display: block;\n  position: relative;\n  padding: 8px 0;\n  line-height: 24px;\n\n  font-size: 24px;\n  width: 7px;\n`;\nexport const Item = styled.span`\n  pointer-events: none;\n  color: #fff;\n  background: #737373;\n  display: block;\n  position: relative;\n  padding: 10px 10px;\n  line-height: 24px;\n\n  font-size: 14px;\n\n  width: 112px;\n`;\n\nexport const DayEvolution = styled.div<DayEvolutionProps>`\n  position: absolute;\n  background: #1ea2cf;\n  display: block;\n  padding: 5px 10px;\n  line-height: 24px;\n  z-index: 9999;\n\n  margin-top: 35px;\n  width: ${(props) => props.width};\n\n  &::before {\n    content: '';\n    position: absolute;\n    border-style: solid;\n    border-color: #1ea2cf transparent;\n    border-width: 0px 6px 12px 6px;\n    bottom: 20px;\n    top: 100%;\n    left: 100%;\n    transform: translateX(-50%);\n  }\n`;\n\nexport const DayEvolutionLabel = styled.div<DayEvolutionProps>`\n  div {\n    background: ${defaultTheme.colors.background};\n    position: relative;\n    z-index: 999;\n    width: max-content;\n\n    ${(props) =>\n      props.backgroundColor &&\n      css`\n        background: ${props.backgroundColor};\n      `}\n  }\n\n  display: flex;\n  justify-content: flex-end;\n  color: #737373;\n  font-size: 16px;\n  margin-left: 20px;\n  margin-top: 15px;\n  width: ${(props) => props.width};\n  font-weight: bold;\n`;\n\nexport const FirstMonthLabel = styled.div<MonthLabelProps>`\n  div {\n    background: ${defaultTheme.colors.background};\n    position: relative;\n    z-index: 999;\n    width: max-content;\n\n    ${(props) =>\n      props.backgroundColor &&\n      css`\n        background: ${props.backgroundColor};\n      `}\n  }\n\n  position: absolute;\n  margin-bottom: 10px;\n  margin-left: -45px;\n  text-transform: capitalize;\n  color: #737373;\n  font-size: 16px;\n  font-weight: bold;\n\n  bottom: 5px;\n`;\n\nexport const MonthLabel = styled.div<MonthLabelProps>`\n  div {\n    background: ${defaultTheme.colors.background};\n    position: relative;\n    z-index: 999;\n    width: max-content;\n\n    ${(props) =>\n      props.backgroundColor &&\n      css`\n        background: ${props.backgroundColor};\n      `}\n  }\n\n  position: absolute;\n  margin-bottom: 10px;\n  margin-left: 10px;\n  text-transform: capitalize;\n  color: #737373;\n  font-size: 16px;\n  font-weight: bold;\n\n  bottom: 5px;\n`;\n\nexport const DayLabel = styled.div<WidthProps>`\n  margin-bottom: 10px;\n  color: #737373;\n  width: ${(props) => `${props.width}px`};\n`;\nexport const MarginMonth = styled.div`\n  border-left: 1px solid #a1c5e5;\n  height: 40px;\n  margin-top: 20px;\n  margin-left: 3px;\n`;\n\nexport const DayTaskEmpty = styled.div<WidthProps>`\n  width: ${(props) => `${props.width}px`};\n`;\n","import styled, { css } from 'styled-components';\nimport { defaultTheme } from '../../styles/theme';\n\ninterface DayTaskProps {\n  position: number;\n  taskPosition: 'top' | 'bottom';\n}\n\ninterface DayBarProps {\n  width: number;\n  type: 'completed' | 'inprogress' | 'planned';\n  text: boolean;\n}\ninterface MarginProps {\n  position: number;\n  type: 'completed' | 'inprogress' | 'planned';\n  taskPosition: 'top' | 'bottom';\n}\n\ninterface WidthProps {\n  width: number;\n  daysFromStart: number;\n}\n\ninterface DescriptionProps {\n  backgroundColor?: string;\n}\n\nconst marginColorsVariations = {\n  completed: css`\n    border-color: ${defaultTheme.colors.completed};\n  `,\n  inprogress: css`\n    border-color: ${defaultTheme.colors.inprogress};\n  `,\n  planned: css`\n    border-color: ${defaultTheme.colors.planned};\n  `,\n};\n\nconst dayBarColorsVariations = {\n  completed: css`\n    background: ${defaultTheme.colors.completed};\n  `,\n  inprogress: css`\n    background: ${defaultTheme.colors.inprogress};\n  `,\n  planned: css`\n    background: ${defaultTheme.colors.planned};\n  `,\n};\n\nexport const MarginDay = styled.div<MarginProps>`\n  position: absolute;\n  border-left: 1px solid;\n  height: ${(props) => `${props.position + 10}px`};\n  margin-left: 3px;\n\n  ${(props) => marginColorsVariations[props.type || 'planned']}\n\n  ${(props) =>\n    props.taskPosition === 'top' &&\n    css`\n      margin-top: -${props.position - 45}px;\n      height: ${props.position + 15}px;\n    `}\n\n  ${(props) =>\n    props.taskPosition === 'bottom' &&\n    css`\n      margin-top: -40px;\n      height: ${props.position + 80}px;\n    `}\n`;\n\nexport const DayTask = styled.div<DayTaskProps>`\n  position: absolute;\n  margin-left: 6px;\n  color: ${defaultTheme.colors.timeline};\n  width: max-content;\n  font-size: 14px;\n\n  ${(props) =>\n    props.taskPosition === 'top' &&\n    css`\n      margin-top: -${props.position}px;\n    `}\n\n  ${(props) =>\n    props.taskPosition === 'bottom' &&\n    css`\n      margin-top: ${props.position}px;\n    `}\n`;\n\nexport const DayBar = styled.div<DayBarProps>`\n  margin-left: -3px;\n  margin-top: 5px;\n  font-size: 14px;\n\n  ${(props) => dayBarColorsVariations[props.type || 'planned']}\n  display: block;\n  width: ${(props) => `${props.width}px`};\n  position: relative;\n  padding: 3px 2px;\n  line-height: 24px;\n  z-index: 999;\n  color: ${defaultTheme.colors.letters};\n\n  white-space: pre-wrap;\n  display: flex;\n  justify-content: center;\n\n  ${(props) =>\n    props.text &&\n    css`\n      min-width: 60px;\n    `}\n`;\n\nexport const DescDay = styled.div<DescriptionProps>`\n  background: ${defaultTheme.colors.background};\n  color: ${defaultTheme.colors.timeline};\n  font-size: 12px;\n  margin-bottom: 5px;\n  margin-left: 5px;\n\n  position: relative;\n  z-index: 999;\n  width: max-content;\n\n  ${(props) =>\n    props.backgroundColor &&\n    css`\n      background: ${props.backgroundColor};\n    `}\n`;\n\nexport const DescTask = styled.div<DescriptionProps>`\n  background: ${defaultTheme.colors.background};\n  position: relative;\n  z-index: 999;\n  padding: 3px 0;\n  display: flex;\n  align-items: center;\n  width: max-content;\n\n  svg {\n    margin-right: 5px;\n  }\n\n  ${(props) =>\n    props.backgroundColor &&\n    css`\n      background: ${props.backgroundColor};\n    `}\n`;\n\nexport const TaskContent = styled.div<WidthProps>`\n  /* position: relative; */\n  position: absolute;\n  margin-left: ${(props) => `${props.daysFromStart * props.width}px`};\n  width: ${(props) => `${props.width}px`};\n  /* margin-left: -2px; */\n`;\n","import React from 'react';\nimport { GoCheck, GoPrimitiveDot } from 'react-icons/go';\n\nimport { format, parseISO, isAfter } from 'date-fns';\n\nimport {\n  DayBar,\n  DescDay,\n  DayTask,\n  MarginDay,\n  DescTask,\n  TaskContent,\n} from './styles';\n\ninterface TaskProps {\n  dateBase: Date;\n  startDate: string;\n  finishDate: string;\n  description: string;\n  position: number;\n  qtyDays: number;\n  widthDay: number;\n  widthBar: number;\n  type: 'completed' | 'inprogress' | 'planned';\n  taskPosition: 'top' | 'bottom';\n  daysLabel: string;\n  backgroundColor?: string;\n  daysFromStart: number;\n}\n\nconst Task: React.FC<TaskProps> = ({\n  dateBase,\n  startDate,\n  finishDate,\n  description,\n  position,\n  qtyDays,\n  widthDay,\n  widthBar,\n  type,\n  taskPosition,\n  daysLabel,\n  backgroundColor,\n  daysFromStart,\n}) => {\n  return (\n    <TaskContent width={widthDay} daysFromStart={daysFromStart}>\n      <DayTask position={position} taskPosition={taskPosition}>\n        <DescDay backgroundColor={backgroundColor}>\n          {qtyDays > 1\n            ? `${format(parseISO(startDate), 'dd/MM')} -\n              ${format(parseISO(finishDate), 'dd/MM')}`\n            : format(parseISO(startDate), 'dd/MM')}\n        </DescDay>\n\n        <DayBar type={type} width={widthDay * widthBar} text={qtyDays > 1}>\n          {qtyDays > 1 ? `${qtyDays} ${daysLabel}` : <span> </span>}\n        </DayBar>\n        <DescTask backgroundColor={backgroundColor}>\n          {isAfter(parseISO(finishDate), dateBase) ? (\n            <GoPrimitiveDot />\n          ) : (\n            <GoCheck />\n          )}\n          {description}\n        </DescTask>\n      </DayTask>\n      <MarginDay position={position} type={type} taskPosition={taskPosition} />\n    </TaskContent>\n  );\n};\n\nexport default Task;\n","import React, { Fragment, useEffect, useState } from 'react';\n\nimport {\n  startOfWeek,\n  addDays,\n  subDays,\n  differenceInDays,\n  format,\n  isEqual,\n  parseISO,\n  isAfter,\n} from 'date-fns';\n\nimport { enUS } from 'date-fns/locale';\nimport { Locale } from 'date-fns';\nimport { defaultTheme } from './styles/theme';\nimport GlobalStyle from './styles/global';\n\nimport {\n  Container,\n  Content,\n  Square,\n  SubtitleStyled,\n  TimelineStyled,\n  Item,\n  ItemDiv,\n  MarginMonth,\n  MonthLabel,\n  DayEvolution,\n  DayEvolutionLabel,\n  DayLabel,\n  FirstMonthLabel,\n  RowStyled,\n} from './styles';\n\nimport Task from './components/Task';\n\nexport interface IPositionTask {\n  line: number;\n  nextDate: Date;\n}\n\nexport interface ITask {\n  id: string;\n  startDate: string;\n  finishDate: string;\n  description: string;\n}\n\ninterface ITaskFormatted {\n  id: string;\n  startDate: string;\n  finishDate: string;\n  description: string;\n  qtyDays: number;\n  widthBar: number;\n  type: 'completed' | 'inprogress' | 'planned';\n  position: number;\n  daysFromStart: number;\n}\n\nexport interface ITimeline {\n  dateBase: Date;\n  totPeriods: number;\n  weeksPerPeriod: number;\n  position: 'top' | 'bottom' | 'both';\n  tasks: ITask[] | undefined;\n  typeDraw: 'inline' | 'rising';\n  locale?: Locale;\n  labels?: string[];\n  daysLabel?: string;\n  backgroundColor?: string;\n}\n\nconst Timeline: React.FC<ITimeline> = ({\n  dateBase,\n  totPeriods,\n  weeksPerPeriod,\n  position,\n  tasks,\n  typeDraw,\n  locale,\n  labels,\n  daysLabel,\n  backgroundColor,\n}) => {\n  const currentLocale = locale || enUS;\n  const currentLabels = labels || [\n    'Finished',\n    'Under Development',\n    'Not Started',\n  ];\n\n  const [dataTimeline, setDataTimeline] = useState({\n    datesBase: [] as Date[],\n    rangeDates: [] as Date[],\n    tasks1: [] as ITask[],\n    tasks2: [] as ITask[],\n    totEvol: '',\n    totalHeigh: 0,\n    widthContainer: 0,\n    marginTop: 0,\n    listTasks1: [] as ITaskFormatted[],\n    listTasks2: [] as ITaskFormatted[],\n    daysPerPeriods: 7,\n    widthDay: 17,\n    currentDaysLabel: 'days',\n    background: defaultTheme.colors.background,\n  });\n\n  const updateTimeline = (lstTasks: ITask[] | undefined): void => {\n    const tasks1: ITask[] = [];\n    const tasks2: ITask[] = [];\n\n    const currentDaysLabel = daysLabel || 'days';\n    const background = backgroundColor || defaultTheme.colors.background;\n\n    const daysPerPeriods = weeksPerPeriod * 7;\n    const widthDay = 17 / weeksPerPeriod;\n\n    const firstMon = addDays(startOfWeek(dateBase), 1);\n    const firstDate = subDays(startOfWeek(firstMon), 27 * weeksPerPeriod);\n\n    if (lstTasks !== undefined) {\n      switch (position) {\n        case 'both':\n          for (let i = 0; i < lstTasks.length; i++) {\n            if (i % 2 === 0) {\n              tasks1.push(lstTasks[i]);\n            } else {\n              tasks2.push(lstTasks[i]);\n            }\n          }\n          break;\n        case 'top':\n          for (let i = 0; i < lstTasks.length; i++) {\n            tasks1.push(lstTasks[i]);\n          }\n          break;\n        case 'bottom':\n          for (let i = 0; i < lstTasks.length; i++) {\n            tasks2.push(lstTasks[i]);\n          }\n          break;\n        default:\n          for (let i = 0; i < lstTasks.length; i++) {\n            if (i % 2 === 0) {\n              tasks1.push(lstTasks[i]);\n            } else {\n              tasks2.push(lstTasks[i]);\n            }\n          }\n          break;\n      }\n    }\n\n    let date = firstDate;\n    const datesBase: Date[] = [];\n    datesBase.push(date);\n    for (let i = 1; i <= totPeriods; i++) {\n      const newDate = addDays(date, daysPerPeriods);\n      datesBase.push(newDate);\n      date = newDate;\n    }\n\n    const diff = differenceInDays(dateBase, firstDate);\n\n    const lastDate = addDays(datesBase[datesBase.length - 1], daysPerPeriods);\n    const lastDrawingDate = addDays(lastDate, 4);\n    const diffTotal = differenceInDays(lastDate, firstDate) + 1;\n\n    let newDate = firstDate;\n    const rangeDates: Date[] = [];\n\n    for (let i = 1; i < diffTotal; i++) {\n      rangeDates.push(newDate);\n      newDate = addDays(newDate, 1);\n    }\n\n    const nextDate = (qtyDays: number): Date => {\n      return addDays(firstDate, qtyDays);\n    };\n\n    const formatTask = (\n      listTasks: ITask[],\n      positionTask: string,\n    ): ITaskFormatted[] => {\n      const listTaskFormatted: ITaskFormatted[] = [];\n      const heigh = positionTask === 'top' ? 90 : 80;\n      const spaceInitial = positionTask === 'top' ? 60 : 20;\n\n      const positionsTasks: IPositionTask[] = [];\n\n      let line = 0;\n      let pos = 0;\n      let i = 1;\n      const list: ITask[] = listTasks;\n\n      while (i < diffTotal) {\n        const processDate = nextDate(i - 1);\n        const selectedTask = list.find((item) =>\n          isEqual(parseISO(item.startDate), processDate),\n        );\n        const findIndex = list.findIndex((item) =>\n          isEqual(parseISO(item.startDate), processDate),\n        );\n\n        if (selectedTask) {\n          const qtyDays =\n            differenceInDays(\n              parseISO(selectedTask.finishDate),\n              parseISO(selectedTask.startDate),\n            ) === 0\n              ? 1\n              : differenceInDays(\n                  parseISO(selectedTask.finishDate),\n                  parseISO(selectedTask.startDate),\n                );\n          const widthBar = isAfter(\n            parseISO(selectedTask.finishDate),\n            lastDrawingDate,\n          )\n            ? differenceInDays(\n                lastDrawingDate,\n                parseISO(selectedTask.startDate),\n              )\n            : qtyDays;\n\n          let type: 'completed' | 'inprogress' | 'planned';\n          if (isAfter(parseISO(selectedTask.startDate), dateBase)) {\n            type = 'planned';\n          } else if (!isAfter(parseISO(selectedTask.finishDate), dateBase)) {\n            type = 'completed';\n          } else {\n            type = 'inprogress';\n          }\n\n          if (typeDraw === 'inline') {\n            const lenDesc = Math.ceil(\n              (selectedTask.description.length * 8) / widthDay,\n            );\n            const lenNext = lenDesc > widthBar ? lenDesc : widthBar;\n            if (positionsTasks.length === 0) {\n              line = 0;\n              positionsTasks.push({\n                line,\n                nextDate: addDays(parseISO(selectedTask.startDate), lenNext),\n              });\n            } else {\n              const totPositions = positionsTasks.length;\n              let found = false;\n              for (let j = 0; j < totPositions; j++) {\n                const item = positionsTasks[j];\n                if (isAfter(parseISO(selectedTask.startDate), item.nextDate)) {\n                  line = item.line;\n                  positionsTasks[j].nextDate = addDays(\n                    parseISO(selectedTask.startDate),\n                    lenNext,\n                  );\n                  j = positionsTasks.length + 1;\n                  found = true;\n                }\n              }\n              if (!found) {\n                line = positionsTasks.length;\n                positionsTasks.push({\n                  line,\n                  nextDate: addDays(parseISO(selectedTask.startDate), lenNext),\n                });\n              }\n            }\n            pos = line * heigh + spaceInitial;\n          } else {\n            pos = line * heigh + spaceInitial;\n            line++;\n          }\n\n          listTaskFormatted.push({\n            id: i.toString(),\n            startDate: selectedTask.startDate,\n            finishDate: selectedTask.finishDate,\n            description: selectedTask.description,\n            qtyDays,\n            widthBar,\n            type,\n            position: pos,\n            daysFromStart: differenceInDays(\n              parseISO(selectedTask.startDate),\n              firstDate,\n            ),\n          });\n          list.splice(findIndex, 1);\n        } else {\n          i++;\n        }\n      }\n\n      return listTaskFormatted;\n    };\n\n    const listTasks1 = tasks1.length > 0 ? formatTask(tasks1, 'top') : [];\n    const listTasks2 = tasks2.length > 0 ? formatTask(tasks2, 'bottom') : [];\n\n    const maxTopPosition = listTasks1.reduce<number>(\n      (tot, item) => (item.position > tot ? item.position : tot),\n      0,\n    );\n\n    const maxBottomPosition = listTasks2.reduce<number>(\n      (tot, item) => (item.position > tot ? item.position : tot),\n      0,\n    );\n\n    const spacesDraw = position === 'top' ? 250 : 300;\n\n    setDataTimeline({\n      datesBase,\n      rangeDates,\n      tasks1,\n      tasks2,\n      totEvol: `${widthDay * diff + 4}px`,\n      totalHeigh: maxTopPosition + maxBottomPosition + spacesDraw,\n      widthContainer: totPeriods * 119 + 150,\n      marginTop: maxTopPosition + 30,\n      listTasks1,\n      listTasks2,\n      daysPerPeriods,\n      widthDay,\n      currentDaysLabel,\n      background,\n    });\n  };\n\n  useEffect(() => {\n    updateTimeline(tasks);\n  }, [\n    tasks,\n    dateBase,\n    totPeriods,\n    weeksPerPeriod,\n    backgroundColor,\n    position,\n    typeDraw,\n  ]);\n\n  return (\n    <Container\n      style={{\n        height: dataTimeline.totalHeigh,\n        backgroundColor: dataTimeline.background,\n      }}\n    >\n      <SubtitleStyled style={{ maxWidth: dataTimeline.widthContainer }}>\n        {currentLabels.map((item, key) => (\n          <Fragment key={key}>\n            <Square color={key.toString()} /> <div>{item}</div>\n          </Fragment>\n        ))}\n      </SubtitleStyled>\n\n      <Content\n        style={{\n          marginTop: dataTimeline.marginTop,\n          maxWidth: dataTimeline.widthContainer,\n        }}\n      >\n        <RowStyled width={dataTimeline.widthContainer}>\n          {dataTimeline.listTasks1.map((item, key) => {\n            return (\n              <Task\n                key={key}\n                dateBase={dateBase}\n                startDate={item.startDate}\n                finishDate={item.finishDate}\n                description={item.description}\n                widthBar={item.widthBar}\n                qtyDays={item.qtyDays}\n                type={item.type}\n                position={item.position}\n                widthDay={dataTimeline.widthDay}\n                taskPosition=\"top\"\n                daysLabel={dataTimeline.currentDaysLabel}\n                backgroundColor={dataTimeline.background}\n                daysFromStart={item.daysFromStart}\n              />\n            );\n          })}\n        </RowStyled>\n        <RowStyled width={dataTimeline.widthContainer}>\n          {dataTimeline.datesBase.length > 0 &&\n            dataTimeline.datesBase[0].getDate() !== 1 && (\n              <div style={{ position: 'relative' }}>\n                <FirstMonthLabel backgroundColor={backgroundColor}>\n                  <div>\n                    {format(dataTimeline.datesBase[0], 'MMMM', {\n                      locale: currentLocale,\n                    })}\n                  </div>\n                </FirstMonthLabel>\n              </div>\n            )}\n\n          {dataTimeline.rangeDates.map((item, key) => {\n            if (item.getDate() === 1) {\n              return (\n                <div\n                  key={key}\n                  style={{ position: 'relative', width: dataTimeline.widthDay }}\n                >\n                  <MarginMonth />\n                  <MonthLabel backgroundColor={backgroundColor}>\n                    <div>{format(item, 'MMMM', { locale: currentLocale })}</div>\n                  </MonthLabel>\n                </div>\n              );\n            }\n            return <DayLabel key={key} width={dataTimeline.widthDay} />;\n          })}\n        </RowStyled>\n\n        <TimelineStyled>\n          {dataTimeline.datesBase.map((item, key) => (\n            <div\n              key={item.getDate()}\n              style={{ display: 'flex', flexDirection: 'row', zIndex: 999 }}\n            >\n              <ItemDiv> {key !== 0 && '|'} </ItemDiv>\n              <Item> {item.getDate()}</Item>\n              {/* {key === datesBase.length - 1 && <ItemDiv> </ItemDiv>} */}\n            </div>\n          ))}\n          <DayEvolution width={dataTimeline.totEvol} />\n        </TimelineStyled>\n        <DayEvolutionLabel\n          width={dataTimeline.totEvol}\n          backgroundColor={backgroundColor}\n        >\n          <div>{format(dateBase, 'dd/MM')}</div>\n        </DayEvolutionLabel>\n\n        <RowStyled width={dataTimeline.widthContainer}>\n          {dataTimeline.listTasks2.map((item, key) => {\n            return (\n              <Task\n                key={key}\n                dateBase={dateBase}\n                startDate={item.startDate}\n                finishDate={item.finishDate}\n                description={item.description}\n                widthBar={item.widthBar}\n                qtyDays={item.qtyDays}\n                type={item.type}\n                position={item.position}\n                widthDay={dataTimeline.widthDay}\n                taskPosition=\"bottom\"\n                daysLabel={dataTimeline.currentDaysLabel}\n                backgroundColor={dataTimeline.background}\n                daysFromStart={item.daysFromStart}\n              />\n            );\n          })}\n        </RowStyled>\n      </Content>\n      <GlobalStyle />\n    </Container>\n  );\n};\n\nexport default Timeline;\n","import  { ITask } from 'react-timeline'\n\nexport const tasks: ITask[] = [\n  {\n    id: '1',\n    startDate: '2020-10-29',\n    finishDate: '2020-10-29',\n    description: 'Lorem ipsum dolor sit amet, consectetur',\n  },\n  {\n    id: '2',\n    startDate: '2020-11-01',\n    finishDate: '2020-12-10',\n    description: 'Excepteur sint occaecat',\n  },\n  {\n    id: '3',\n    startDate: '2020-11-10',\n    finishDate: '2020-11-10',\n    description: 'Duis aute irure dolor',\n  },\n  {\n    id: '4',\n    startDate: '2020-11-06',\n    finishDate: '2020-11-15',\n    description: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit',\n  },\n  {\n    id: '5',\n    startDate: '2020-11-20',\n    finishDate: '2020-11-24',\n    description: 'Sed ut perspiciatis unde omnis iste natus error',\n  },\n  {\n    id: '6',\n    startDate: '2020-12-10',\n    finishDate: '2020-12-13',\n    description: 'Nemo enim ipsam voluptatem',\n  },\n];\n\nexport const tasks2: ITask[] = [\n  {\n    id: '1',\n    startDate: '2020-04-27',\n    finishDate: '2020-05-08',\n    description: 'Sprint 10',\n  },\n  {\n    id: '2',\n    startDate: '2020-05-11',\n    finishDate: '2020-05-15',\n    description: 'PI Planning II',\n  },\n  {\n    id: '3',\n    startDate: '2020-05-18',\n    finishDate: '2020-06-04',\n    description: 'Sprint 11',\n  },\n  {\n    id: '4',\n    startDate: '2020-06-05',\n    finishDate: '2020-06-18',\n    description: 'Sprint 12',\n  },\n  {\n    id: '5',\n    startDate: '2020-06-19',\n    finishDate: '2020-07-02',\n    description: 'Sprint 13',\n  },\n  {\n    id: '6',\n    startDate: '2020-07-03',\n    finishDate: '2020-07-16',\n    description: 'Sprint 14',\n  },\n  {\n    id: '7',\n    startDate: '2020-07-17',\n    finishDate: '2020-07-30',\n    description: 'Sprint 15',\n  },\n  {\n    id: '8',\n    startDate: '2020-07-31',\n    finishDate: '2020-08-13',\n    description: 'Sprint 16',\n  },\n  {\n    id: '9',\n    startDate: '2020-08-14',\n    finishDate: '2020-08-27',\n    description: 'Sprint 17',\n  },\n];\n\nexport const tasks3: ITask[] = [\n  {\n    id: '1',\n    startDate: '2020-10-19',\n    finishDate: '2020-11-02',\n    description: 'Sprint 1',\n  },\n  {\n    id: '2',\n    startDate: '2020-11-02',\n    finishDate: '2020-11-15',\n    description: 'Sprint 2',\n  },\n  {\n    id: '3',\n    startDate: '2020-11-16',\n    finishDate: '2020-11-29',\n    description: 'Sprint 3',\n  },\n  {\n    id: '4',\n    startDate: '2020-11-30',\n    finishDate: '2020-12-13',\n    description: 'Sprint 4',\n  },\n];\n\nexport const tasks4: ITask[] = [\n  {\n    id: '1',\n    startDate: '2020-07-10',\n    finishDate: '2020-07-15',\n    description: 'Lorem ipsum dolor sit amet, consectetur',\n  },\n  {\n    id: '2',\n    startDate: '2020-07-10',\n    finishDate: '2020-07-15',\n    description: 'Excepteur sint occaecat',\n  },\n  {\n    id: '3',\n    startDate: '2020-07-10',\n    finishDate: '2020-07-15',\n    description: 'Duis aute irure dolor',\n  },\n];\n","import React, { ChangeEvent, useState } from 'react'\n\nimport Timeline, { ITask} from 'react-timeline'\n\nimport { tasks } from './test/tasks'\n\nimport { addDays, format } from 'date-fns';\nimport ReactDatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\n\n\nconst App = () => {\n  const [id, setId] = useState(100);\n  const [date1, setNewDate1] = useState(new Date('2020-11-01'));\n  const [date2, setNewDate2] = useState(addDays(new Date('2020-11-01'), 3));\n  const [listTasks, setListTasks] = useState(tasks);\n\n  const [dateBasePreview, setDateBasePreview] = useState<Date>(new Date());\n  const [periods, setPeriods] = useState(9);\n  const [weeks, setWeeks] = useState(1);\n  const [position, setPosition] = useState<'both' | 'top' | 'bottom'>('both');\n  const [typeDraw, setTypeDraw] = useState<'rising' | 'inline'>('inline');\n  const [background, setBackground] = useState('#f0f0f5');\n\n  const handleClick = (): void => {\n    const newId = id + 1;\n    setId(newId);\n    const newDate1 = addDays(date1, 3);\n    setNewDate1(newDate1);\n    const newDate2 = addDays(date2, 3);\n    setNewDate2(newDate2);\n\n    const newTask: ITask = {\n      id: newId.toString(),\n      startDate: format(date1, 'yyyy-MM-dd'),\n      finishDate: format(date2, 'yyyy-MM-dd'),\n      description: `New task ${newId}`,\n    };\n    setListTasks((state) => [...state, newTask]);\n  };\n\n  const handleDateBase = (date: Date): void => {\n    if (!date) return;\n    setDateBasePreview(date);\n  };\n\n  const handlePeriod = (e: ChangeEvent<HTMLSelectElement>): void => {\n    setPeriods(Number(e.target.value));\n  };\n  const handleWeeks = (e: ChangeEvent<HTMLSelectElement>): void => {\n    setWeeks(Number(e.target.value));\n  };\n  const handlePosition = (e: ChangeEvent<HTMLSelectElement>): void => {\n    let pos: 'both' | 'top' | 'bottom' = 'both';\n\n    switch (e.target.value) {\n      case 'both':\n        pos = 'both';\n        break;\n      case 'top':\n        pos = 'top';\n        break;\n      case 'bottom':\n        pos = 'bottom';\n        break;\n      default:\n        pos = 'both';\n        break;\n    }\n    setPosition(pos);\n  };\n  const handleDrawType = (e: ChangeEvent<HTMLSelectElement>): void => {\n    let tpDraw: 'rising' | 'inline' = 'inline';\n\n    switch (e.target.value) {\n      case 'rising':\n        tpDraw = 'rising';\n        break;\n      case 'inline':\n        tpDraw = 'inline';\n        break;\n      default:\n        tpDraw = 'inline';\n        break;\n    }\n    setTypeDraw(tpDraw);\n  };\n\n  return (\n    <>\n      <div style={{ display: 'flex', flexDirection: 'row', margin: 40 }}>\n        <div style={{ marginLeft: 10, color: '#737373', zIndex: 99999 }}>\n          <ReactDatePicker\n            dateFormat=\"dd/MM/yyyy\"\n            placeholderText=\"Data Base\"\n            selected={dateBasePreview}\n            onChange={handleDateBase}\n          />\n        </div>\n\n        <div style={{ marginLeft: 10, color: '#737373' }}>\n          Qty periods:\n          <select value={periods} onChange={handlePeriod}>\n            <option value=\"4\">4</option>\n            <option value=\"5\">5</option>\n            <option value=\"6\">6</option>\n            <option value=\"7\">7</option>\n            <option value=\"8\">8</option>\n            <option value=\"9\">9</option>\n            <option value=\"10\">10</option>\n          </select>\n        </div>\n        <div style={{ marginLeft: 10, color: '#737373' }}>\n          Weeks Per Period:\n          <select value={weeks} onChange={handleWeeks}>\n            <option value=\"1\">1</option>\n            <option value=\"2\">2</option>\n            <option value=\"3\">3</option>\n            <option value=\"4\">4</option>\n          </select>\n        </div>\n        <div style={{ marginLeft: 10, color: '#737373' }}>\n          Position:\n          <select value={position} onChange={handlePosition}>\n            <option value=\"both\">both</option>\n            <option value=\"top\">top</option>\n            <option value=\"bottom\">bottom</option>\n          </select>\n        </div>\n        <div style={{ marginLeft: 10, color: '#737373' }}>\n          Drawing type:\n          <select value={typeDraw} onChange={handleDrawType}>\n            <option value=\"inline\">inline</option>\n            <option value=\"rising\">rising</option>\n          </select>\n        </div>\n        <div style={{ marginLeft: 10, color: '#737373' }}>\n          Background:\n          <select\n            value={background}\n            onChange={(e) => setBackground(e.target.value)}\n          >\n            <option value=\"#f0f0f5\">#f0f0f5</option>\n            <option value=\"#fff\">#fff</option>\n          </select>\n        </div>\n        <button\n          style={{ paddingLeft: 10, paddingRight: 10, marginLeft: 10 }}\n          type=\"button\"\n          onClick={handleClick}\n        >\n          Add new activity\n        </button>\n      </div>\n      <Timeline\n        dateBase={dateBasePreview}\n        totPeriods={periods}\n        weeksPerPeriod={weeks}\n        position={position}\n        typeDraw={typeDraw}\n        tasks={listTasks}\n        backgroundColor={background}\n      />\n    </>\n  );\n\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}