{"version":3,"sources":["../../src/styles/theme.ts","../../src/styles/global.ts","../../src/styles.ts","../../src/components/Task/styles.ts","../../src/components/Task/index.tsx","../../src/index.tsx","App.tsx","index.tsx"],"names":["defaultTheme","background","letters","completed","inprogress","planned","timeline","createGlobalStyle","Container","styled","Content","Square","props","css","SubtitleStyled","RowStyled","TimelineStyled","ItemDiv","Item","DayEvolution","DayEvolutionLabel","FirstMonthLabel","MonthLabel","DayLabel","MarginMonth","DayTaskEmpty","marginColorsVariations","dayBarColorsVariations","MarginDay","DayTask","DayBar","DescDay","DescTask","TaskContent","Task","daysLabel","width","widthDay","position","taskPosition","React","qtyDays","format","parseISO","type","widthBar","text","isAfter","currentLocale","locale","currentLabels","labels","currentDaysLabel","daysPerPeriods","weeksPerPeriod","firstMon","addDays","startOfWeek","firstDate","subDays","line","line2","datesBase","rangeDates","tasks1","tasks2","tasks","i","date","newDate","diff","differenceInDays","dateBase","totEvol","lastDate","lastDrawingDate","diffTotal","formatTask","listTasks","listTaskFormatted","processDate","nextDate","selectedTask","item","isEqual","id","startDate","finishDate","description","listTasks1","listTasks2","marginTop","typeDraw","widthContainer","totPeriods","style","maxWidth","key","color","pos","display","flexDirection","zIndex","Date","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7c99e7ad.chunk.js","sourcesContent":["export const defaultTheme = {\n  colors: {\n    background: '#f0f0f5',\n    letters: '#FFF',\n    completed: '#1aaa42',\n    inprogress: '#a5a5a5',\n    planned: '#02b2ee',\n    timeline: '#737373',\n  },\n};\n","import { createGlobalStyle } from 'styled-components';\n\nimport { defaultTheme } from './theme';\n\nexport default createGlobalStyle`\n  *{\n    margin: 0;\n    padding:0;\n    outline: 0;\n    box-sizing: border-box\n  }\n\n  body{\n    background: ${defaultTheme.colors.background};\n    color:  ${defaultTheme.colors.letters};\n    -webkit-font-smoothing: antialiased;\n  }\n\n  body, input, button {\n    font-family: Arial, Helvetica, sans-serif\t;\n    font-size: 16px;\n  }\n\n  h1, h2, h3, h4, h5, h6, strong {\n    font-weight: 500;\n  }\n\n  button {\n    cursor: pointer;\n  }\n\n  .react-confirm-alert {\n    margin: 20px;\n  }\n\n  .react-confirm-alert-body {\n    width: auto;\n    h1{\n      font-size: 22px;\n      color: #363f5f;\n      margin-bottom: 10px;\n    }\n\n    .react-confirm-alert-button-group {\n      button:first-child {\n        background: #e83f5b;\n      }\n      button:last-child {\n        background: #fff;\n        color: #3e3b47;\n        border: 1px solid #3e3b47;\n      }\n    }\n  }\n\n\n`;\n","import styled, { css } from 'styled-components';\nimport { defaultTheme } from './styles/theme';\n\ninterface DayEvolutionProps {\n  width: string;\n}\n\ninterface WidthProps {\n  width: number;\n}\n\ninterface SquareProps {\n  color: string;\n}\n\nexport const Container = styled.div`\n  display: block;\n  margin: auto auto;\n`;\n\nexport const Content = styled.div`\n  display: block;\n  margin: auto auto;\n`;\n\nexport const Square = styled.span<SquareProps>`\n  height: 10px;\n  width: 10px;\n  background-color: #555;\n  margin-right: 5px;\n  background-color: ${(props) => props.color};\n\n  ${(props) =>\n    props.color === '0' &&\n    css`\n      background-color: ${defaultTheme.colors.completed};\n    `}\n  ${(props) =>\n    props.color === '1' &&\n    css`\n      background-color: ${defaultTheme.colors.inprogress};\n    `}\n  ${(props) =>\n    props.color === '2' &&\n    css`\n      background-color: ${defaultTheme.colors.planned};\n    `}\n`;\n\nexport const SubtitleStyled = styled.div`\n  display: flex;\n  flex-direction: row;\n  color: #737373;\n  margin: auto auto;\n  margin-top: 10px;\n  align-items: center;\n\n  div {\n    margin-right: 20px;\n    font-size: 14px;\n  }\n`;\n\nexport const RowStyled = styled.div<WidthProps>`\n  display: flex;\n  flex-direction: row;\n  width: ${(props) => `${props.width}px`};\n`;\n\nexport const TimelineStyled = styled.div`\n  display: flex;\n  flex-direction: row;\n\n  padding: 50px 30px;\n\n  list-style-type: none;\n  padding: 0;\n  margin: 0;\n`;\n\nexport const ItemDiv = styled.span`\n  color: #fff;\n  background: #737373;\n  display: block;\n  position: relative;\n  padding: 8px 0;\n  line-height: 24px;\n\n  font-size: 24px;\n  width: 7px;\n`;\nexport const Item = styled.span`\n  pointer-events: none;\n  color: #fff;\n  background: #737373;\n  display: block;\n  position: relative;\n  padding: 10px 10px;\n  line-height: 24px;\n\n  font-size: 14px;\n\n  width: 112px;\n`;\n\nexport const DayEvolution = styled.div<DayEvolutionProps>`\n  position: absolute;\n  background: #1ea2cf;\n  display: block;\n  padding: 5px 10px;\n  line-height: 24px;\n  z-index: 9999;\n\n  margin-top: 35px;\n  width: ${(props) => props.width};\n\n  &::before {\n    content: '';\n    position: absolute;\n    border-style: solid;\n    border-color: #1ea2cf transparent;\n    border-width: 0px 6px 12px 6px;\n    bottom: 20px;\n    top: 100%;\n    left: 100%;\n    transform: translateX(-50%);\n  }\n`;\n\nexport const DayEvolutionLabel = styled.div<DayEvolutionProps>`\n  display: flex;\n  justify-content: flex-end;\n  color: #737373;\n  font-size: 16px;\n  margin-left: 20px;\n  margin-top: 15px;\n  width: ${(props) => props.width};\n  font-weight: bold;\n`;\n\nexport const FirstMonthLabel = styled.div`\n  position: absolute;\n  margin-bottom: 10px;\n  margin-left: -45px;\n  text-transform: capitalize;\n  color: #737373;\n  font-size: 16px;\n  font-weight: bold;\n\n  bottom: 5px;\n`;\n\nexport const MonthLabel = styled.div`\n  position: absolute;\n  margin-bottom: 10px;\n  margin-left: 10px;\n  text-transform: capitalize;\n  color: #737373;\n  font-size: 16px;\n  font-weight: bold;\n\n  bottom: 5px;\n`;\n\nexport const DayLabel = styled.div<WidthProps>`\n  margin-bottom: 10px;\n  color: #737373;\n  width: ${(props) => `${props.width}px`};\n`;\nexport const MarginMonth = styled.div`\n  border-left: 1px solid #a1c5e5;\n  height: 40px;\n  margin-top: 20px;\n  margin-left: 3px;\n`;\n\nexport const DayTaskEmpty = styled.div<WidthProps>`\n  width: ${(props) => `${props.width}px`};\n`;\n","import styled, { css } from 'styled-components';\nimport { defaultTheme } from '../../styles/theme';\n\ninterface DayTaskProps {\n  position: number;\n  taskPosition: 'top' | 'bottom';\n}\n\ninterface DayBarProps {\n  width: number;\n  type: 'completed' | 'inprogress' | 'planned';\n  text: boolean;\n}\ninterface MarginProps {\n  position: number;\n  type: 'completed' | 'inprogress' | 'planned';\n  taskPosition: 'top' | 'bottom';\n}\n\ninterface WidthProps {\n  width: number;\n}\n\nconst marginColorsVariations = {\n  completed: css`\n    border-color: ${defaultTheme.colors.completed};\n  `,\n  inprogress: css`\n    border-color: ${defaultTheme.colors.inprogress};\n  `,\n  planned: css`\n    border-color: ${defaultTheme.colors.planned};\n  `,\n};\n\nconst dayBarColorsVariations = {\n  completed: css`\n    background: ${defaultTheme.colors.completed};\n  `,\n  inprogress: css`\n    background: ${defaultTheme.colors.inprogress};\n  `,\n  planned: css`\n    background: ${defaultTheme.colors.planned};\n  `,\n};\n\nexport const MarginDay = styled.div<MarginProps>`\n  position: absolute;\n  border-left: 1px solid;\n  height: ${(props) => `${props.position + 10}px`};\n  margin-left: 7px;\n\n  ${(props) => marginColorsVariations[props.type || 'planned']}\n\n  ${(props) =>\n    props.taskPosition === 'top' &&\n    css`\n      margin-top: -${props.position - 50}px;\n      height: ${props.position + 10}px;\n    `}\n\n  ${(props) =>\n    props.taskPosition === 'bottom' &&\n    css`\n      margin-top: -40px;\n      height: ${props.position + 80}px;\n    `}\n`;\n\nexport const DayTask = styled.div<DayTaskProps>`\n  position: absolute;\n  margin-left: 10px;\n  color: ${defaultTheme.colors.timeline};\n  width: max-content;\n  font-size: 14px;\n\n  ${(props) =>\n    props.taskPosition === 'top' &&\n    css`\n      margin-top: -${props.position}px;\n    `}\n\n  ${(props) =>\n    props.taskPosition === 'bottom' &&\n    css`\n      margin-top: ${props.position}px;\n    `}\n`;\n\nexport const DayBar = styled.div<DayBarProps>`\n  margin-left: -3px;\n  margin-top: 5px;\n  font-size: 14px;\n\n  ${(props) => dayBarColorsVariations[props.type || 'planned']}\n  display: block;\n  width: ${(props) => `${props.width}px`};\n  position: relative;\n  padding: 3px 2px;\n  line-height: 24px;\n  z-index: 999;\n  color: ${defaultTheme.colors.letters};\n\n  white-space: pre-wrap;\n  display: flex;\n  justify-content: center;\n\n  ${(props) =>\n    props.text &&\n    css`\n      min-width: 60px;\n    `}\n`;\n\nexport const DescDay = styled.div`\n  color: ${defaultTheme.colors.timeline};\n  font-size: 12px;\n  margin-bottom: 5px;\n  margin-left: 5px;\n`;\n\nexport const DescTask = styled.div`\n  background: ${defaultTheme.colors.background};\n  position: relative;\n  z-index: 999;\n  padding: 3px 0;\n  display: flex;\n  align-items: center;\n  width: max-content;\n\n  svg {\n    margin-right: 5px;\n  }\n`;\n\nexport const TaskContent = styled.div<WidthProps>`\n  position: relative;\n  width: ${(props) => `${props.width}px`};\n`;\n","import React from 'react';\nimport { GoCheck, GoPrimitiveDot } from 'react-icons/go';\n\nimport { format, parseISO, isAfter } from 'date-fns';\n\nimport {\n  DayBar,\n  DescDay,\n  DayTask,\n  MarginDay,\n  DescTask,\n  TaskContent,\n} from './styles';\n\ninterface TaskProps {\n  dateBase: Date;\n  startDate: string;\n  finishDate: string;\n  description: string;\n  position: number;\n  qtyDays: number;\n  widthDay: number;\n  widthBar: number;\n  type: 'completed' | 'inprogress' | 'planned';\n  taskPosition: 'top' | 'bottom';\n  daysLabel: string;\n}\n\nconst Task: React.FC<TaskProps> = ({\n  dateBase,\n  startDate,\n  finishDate,\n  description,\n  position,\n  qtyDays,\n  widthDay,\n  widthBar,\n  type,\n  taskPosition,\n  daysLabel,\n}) => {\n  return (\n    <TaskContent width={widthDay}>\n      <DayTask position={position} taskPosition={taskPosition}>\n        <DescDay>\n          {qtyDays > 1\n            ? `${format(parseISO(startDate), 'dd/MM')} -\n              ${format(parseISO(finishDate), 'dd/MM')}`\n            : format(parseISO(startDate), 'dd/MM')}\n        </DescDay>\n\n        <DayBar type={type} width={widthDay * widthBar} text={qtyDays > 1}>\n          {qtyDays > 1 ? `${qtyDays} ${daysLabel}` : <span> </span>}\n        </DayBar>\n        <DescTask>\n          {isAfter(parseISO(finishDate), dateBase) ? (\n            <GoPrimitiveDot />\n          ) : (\n            <GoCheck />\n          )}\n          {description}\n        </DescTask>\n      </DayTask>\n      <MarginDay position={position} type={type} taskPosition={taskPosition} />\n    </TaskContent>\n  );\n};\n\nexport default Task;\n","import React, { Fragment } from 'react';\n\nimport {\n  startOfWeek,\n  addDays,\n  subDays,\n  differenceInDays,\n  format,\n  isEqual,\n  parseISO,\n  isAfter,\n} from 'date-fns';\n\nimport { enUS } from 'date-fns/locale';\nimport { Locale } from 'date-fns';\nimport GlobalStyle from './styles/global';\n\nimport {\n  Container,\n  Content,\n  Square,\n  SubtitleStyled,\n  TimelineStyled,\n  Item,\n  ItemDiv,\n  MarginMonth,\n  MonthLabel,\n  DayEvolution,\n  DayEvolutionLabel,\n  DayLabel,\n  FirstMonthLabel,\n  DayTaskEmpty,\n  RowStyled,\n} from './styles';\n\nimport Task from './components/Task';\n\nexport interface ITask {\n  id: string;\n  startDate: string;\n  finishDate: string;\n  description: string;\n}\n\ninterface ITaskFormatted {\n  id: string;\n  startDate: string;\n  finishDate: string;\n  description: string;\n  qtyDays: number;\n  widthBar: number;\n  type: 'completed' | 'inprogress' | 'planned';\n}\n\nexport interface ITimeline {\n  dateBase: Date;\n  totPeriods: number;\n  weeksPerPeriod: number;\n  position: 'top' | 'bottom' | 'both';\n  tasks: ITask[] | undefined;\n  typeDraw: 'inline' | 'rising';\n  locale?: Locale;\n  labels?: string[];\n  daysLabel?: string;\n}\n\nconst Timeline: React.FC<ITimeline> = ({\n  dateBase,\n  totPeriods,\n  weeksPerPeriod,\n  position,\n  tasks,\n  typeDraw,\n  locale,\n  labels,\n  daysLabel,\n}) => {\n  const currentLocale = locale || enUS;\n  const currentLabels = labels || [\n    'Finished',\n    'Under Development',\n    'Not Started',\n  ];\n\n  const currentDaysLabel = daysLabel || 'days';\n\n  const daysPerPeriods = weeksPerPeriod * 7;\n  const widthDay = 17 / weeksPerPeriod;\n\n  const firstMon = addDays(startOfWeek(dateBase), 1);\n  const firstDate = subDays(startOfWeek(firstMon), 27 * weeksPerPeriod);\n  let line = 0;\n  let line2 = 0;\n\n  const datesBase: Date[] = [];\n  const rangeDates: Date[] = [];\n\n  const tasks1: ITask[] = [];\n  const tasks2: ITask[] = [];\n\n  if (tasks !== undefined) {\n    switch (position) {\n      case 'both':\n        for (let i = 0; i < tasks.length; i++) {\n          if (i % 2 === 0) {\n            tasks1.push(tasks[i]);\n          } else {\n            tasks2.push(tasks[i]);\n          }\n        }\n        break;\n      case 'top':\n        for (let i = 0; i < tasks.length; i++) {\n          tasks1.push(tasks[i]);\n        }\n        break;\n      case 'bottom':\n        for (let i = 0; i < tasks.length; i++) {\n          tasks2.push(tasks[i]);\n        }\n        break;\n      default:\n        for (let i = 0; i < tasks.length; i++) {\n          if (i % 2 === 0) {\n            tasks1.push(tasks[i]);\n          } else {\n            tasks2.push(tasks[i]);\n          }\n        }\n        break;\n    }\n  }\n\n  let date = firstDate;\n  datesBase.push(date);\n  for (let i = 1; i <= totPeriods; i++) {\n    const newDate = addDays(date, daysPerPeriods);\n    datesBase.push(newDate);\n    date = newDate;\n  }\n  // console.log('datesBase', datesBase);\n\n  const diff = differenceInDays(dateBase, firstDate);\n  const totEvol = `${widthDay * diff + 4}px`;\n\n  const lastDate = addDays(datesBase[datesBase.length - 1], daysPerPeriods);\n  const lastDrawingDate = addDays(lastDate, 4);\n  // console.log('lastDate', lastDate);\n  const diffTotal = differenceInDays(lastDate, firstDate) + 1;\n\n  let newDate = firstDate;\n  for (let i = 1; i < diffTotal; i++) {\n    rangeDates.push(newDate);\n    newDate = addDays(newDate, 1);\n  }\n\n  const nextDate = (qtyDays: number): Date => {\n    return addDays(firstDate, qtyDays);\n  };\n\n  const formatTask = (listTasks: ITask[]): ITaskFormatted[] => {\n    const listTaskFormatted: ITaskFormatted[] = [];\n    for (let i = 1; i < diffTotal; i++) {\n      const processDate = nextDate(i - 1);\n      const selectedTask = listTasks.find((item) =>\n        isEqual(parseISO(item.startDate), processDate),\n      );\n      if (selectedTask) {\n        const qtyDays =\n          differenceInDays(\n            parseISO(selectedTask.finishDate),\n            parseISO(selectedTask.startDate),\n          ) === 0\n            ? 1\n            : differenceInDays(\n                parseISO(selectedTask.finishDate),\n                parseISO(selectedTask.startDate),\n              );\n        const widthBar = isAfter(\n          parseISO(selectedTask.finishDate),\n          lastDrawingDate,\n        )\n          ? differenceInDays(lastDrawingDate, parseISO(selectedTask.startDate))\n          : qtyDays;\n\n        let type: 'completed' | 'inprogress' | 'planned';\n        if (isAfter(parseISO(selectedTask.startDate), dateBase)) {\n          type = 'planned';\n        } else if (!isAfter(parseISO(selectedTask.finishDate), dateBase)) {\n          type = 'completed';\n        } else {\n          type = 'inprogress';\n        }\n\n        listTaskFormatted.push({\n          id: i.toString(),\n          startDate: selectedTask.startDate,\n          finishDate: selectedTask.finishDate,\n          description: selectedTask.description,\n          qtyDays,\n          widthBar,\n          type,\n        });\n      } else {\n        listTaskFormatted.push({\n          id: i.toString(),\n          startDate: '',\n          finishDate: '',\n          description: '',\n          qtyDays: 0,\n          widthBar: 0,\n          type: 'planned',\n        });\n      }\n    }\n\n    return listTaskFormatted;\n  };\n\n  const listTasks1 = formatTask(tasks1);\n  const listTasks2 = formatTask(tasks2);\n\n  const posTop = position === 'bottom' ? 0 : 90;\n\n  const marginTop =\n    typeDraw === 'inline'\n      ? posTop\n      : listTasks1.filter((item) => item.startDate !== '').length * 90;\n\n  const widthContainer = totPeriods * 119 + 50;\n\n  return (\n    <Container>\n      <SubtitleStyled style={{ maxWidth: widthContainer }}>\n        {currentLabels.map((item, key) => (\n          <Fragment key={key}>\n            <Square color={key.toString()} /> <div>{item}</div>\n          </Fragment>\n        ))}\n      </SubtitleStyled>\n\n      <Content style={{ marginTop, maxWidth: widthContainer }}>\n        <RowStyled width={widthContainer}>\n          {listTasks1.map((item, key) => {\n            if (item.startDate !== '') {\n              const pos = line * 90 + 60;\n              if (typeDraw === 'rising') {\n                line++;\n              }\n              return (\n                <Task\n                  key={key}\n                  dateBase={dateBase}\n                  startDate={item.startDate}\n                  finishDate={item.finishDate}\n                  description={item.description}\n                  widthBar={item.widthBar}\n                  qtyDays={item.qtyDays}\n                  type={item.type}\n                  position={pos}\n                  widthDay={widthDay}\n                  taskPosition=\"top\"\n                  daysLabel={currentDaysLabel}\n                />\n              );\n            }\n            return <DayTaskEmpty key={key} width={widthDay} />;\n          })}\n        </RowStyled>\n        <RowStyled width={widthContainer}>\n          <div style={{ position: 'relative' }}>\n            <FirstMonthLabel>\n              {format(datesBase[0], 'MMMM', { locale: currentLocale })}\n            </FirstMonthLabel>\n          </div>\n          {rangeDates.map((item, key) => {\n            if (item.getDate() === 1) {\n              return (\n                <div\n                  key={key}\n                  style={{ position: 'relative', width: widthDay }}\n                >\n                  <MarginMonth />\n                  <MonthLabel>\n                    {format(item, 'MMMM', { locale: currentLocale })}\n                  </MonthLabel>\n                </div>\n              );\n            }\n            return <DayLabel key={key} width={widthDay} />;\n          })}\n        </RowStyled>\n\n        <TimelineStyled>\n          {datesBase.map((item, key) => (\n            <div\n              key={item.getDate()}\n              style={{ display: 'flex', flexDirection: 'row', zIndex: 999 }}\n            >\n              <ItemDiv> {key !== 0 && '|'} </ItemDiv>\n              <Item> {item.getDate()}</Item>\n              {/* {key === datesBase.length - 1 && <ItemDiv> </ItemDiv>} */}\n            </div>\n          ))}\n          <DayEvolution width={totEvol} />\n        </TimelineStyled>\n        <DayEvolutionLabel width={totEvol}>\n          {format(dateBase, 'dd/MM')}\n        </DayEvolutionLabel>\n\n        <RowStyled width={widthContainer}>\n          {listTasks2.map((item, key) => {\n            if (item.startDate !== '') {\n              const pos = line2 * 80 + 20;\n              if (typeDraw === 'rising') {\n                line2++;\n              }\n              return (\n                <Task\n                  key={key}\n                  dateBase={dateBase}\n                  startDate={item.startDate}\n                  finishDate={item.finishDate}\n                  description={item.description}\n                  widthBar={item.widthBar}\n                  qtyDays={item.qtyDays}\n                  type={item.type}\n                  position={pos}\n                  widthDay={widthDay}\n                  taskPosition=\"bottom\"\n                  daysLabel={currentDaysLabel}\n                />\n              );\n            }\n            return <DayTaskEmpty key={key} width={widthDay} />;\n          })}\n        </RowStyled>\n      </Content>\n      <GlobalStyle />\n    </Container>\n  );\n};\n\nexport default Timeline;\n","import React from 'react'\n\nimport Timeline, { ITask } from 'react-timeline'\n\nconst dateBase = new Date(2020, 6, 15);\nconst totPeriods = 6;\nconst weeksPerPeriods = 1;\nconst position: 'top' | 'bottom' | 'both' = 'bottom';\nconst typeDraw: 'inline' | 'rising' = 'rising';\n// const labels = ['Concluído', 'Em Desenvolvimento', 'Não Iniciado'];\n\nexport const tasks: ITask[] = [\n  {\n    id: '1',\n    startDate: '2020-06-29',\n    finishDate: '2020-06-29',\n    description: 'Lorem ipsum dolor sit amet, consectetur',\n  },\n  {\n    id: '2',\n    startDate: '2020-07-01',\n    finishDate: '2020-08-10',\n    description: 'Excepteur sint occaecat',\n  },\n  {\n    id: '3',\n    startDate: '2020-07-10',\n    finishDate: '2020-07-10',\n    description: 'Duis aute irure dolor',\n  },\n  {\n    id: '4',\n    startDate: '2020-07-06',\n    finishDate: '2020-07-15',\n    description: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.',\n  },\n  {\n    id: '5',\n    startDate: '2020-07-20',\n    finishDate: '2020-07-24',\n    description: 'Sed ut perspiciatis unde omnis iste natus error',\n  },\n  {\n    id: '6',\n    startDate: '2020-08-10',\n    finishDate: '2020-08-13',\n    description: 'Nemo enim ipsam voluptate',\n  },\n\n];\n\n\nconst App = () => {\n  return (\n    <Timeline\n      dateBase={dateBase}\n      totPeriods={totPeriods}\n      weeksPerPeriod={weeksPerPeriods}\n      position={position}\n      typeDraw={typeDraw}\n      // locale={ptBR}\n      // labels={labels}\n      tasks={tasks}\n      daysLabel=\"dias\"\n    />\n  )\n\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}