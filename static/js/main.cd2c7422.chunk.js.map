{"version":3,"sources":["../../src/styles/theme.ts","../../src/styles/global.ts","../../src/styles.ts","../../src/components/Task/styles.ts","../../src/components/Task/index.tsx","../../src/index.tsx","test/tasks.tsx","App.tsx","index.tsx"],"names":["defaultTheme","background","letters","completed","inprogress","planned","timeline","createGlobalStyle","Container","styled","Content","Square","props","css","SubtitleStyled","RowStyled","TimelineStyled","ItemDiv","Item","DayEvolution","DayEvolutionLabel","FirstMonthLabel","MonthLabel","DayLabel","MarginMonth","DayTaskEmpty","marginColorsVariations","dayBarColorsVariations","MarginDay","DayTask","DayBar","DescDay","DescTask","TaskContent","Task","backgroundColor","width","widthDay","position","taskPosition","qtyDays","format","parseISO","type","widthBar","text","React","isAfter","currentLocale","locale","currentLabels","labels","currentDaysLabel","daysLabel","daysPerPeriods","weeksPerPeriod","firstMon","addDays","startOfWeek","firstDate","subDays","datesBase","rangeDates","tasks1","tasks2","tasks","i","date","newDate","diff","differenceInDays","dateBase","totEvol","lastDate","lastDrawingDate","diffTotal","formatTask","listTaskFormatted","heigh","positionTask","spaceInitial","positionsTasks","line","pos","processDate","nextDate","selectedTask","listTasks","item","isEqual","typeDraw","lenDesc","Math","lenNext","totPositions","found","j","id","startDate","finishDate","description","listTasks1","listTasks2","maxTopPosition","totalHeigh","marginTop","widthContainer","totPeriods","style","height","maxWidth","key","color","display","flexDirection","zIndex","Date","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cd2c7422.chunk.js","sourcesContent":["export const defaultTheme = {\n  colors: {\n    background: '#f0f0f5',\n    letters: '#FFF',\n    completed: '#1aaa42',\n    inprogress: '#a5a5a5',\n    planned: '#02b2ee',\n    timeline: '#737373',\n  },\n};\n","import { createGlobalStyle } from 'styled-components';\n\nimport { defaultTheme } from './theme';\n\nexport default createGlobalStyle`\n  *{\n    margin: 0;\n    padding:0;\n    outline: 0;\n    box-sizing: border-box\n  }\n\n  body{\n    background: ${defaultTheme.colors.background};\n    color:  ${defaultTheme.colors.letters};\n    -webkit-font-smoothing: antialiased;\n  }\n\n  body, input, button {\n    font-family: Arial, Helvetica, sans-serif\t;\n    font-size: 16px;\n  }\n\n  h1, h2, h3, h4, h5, h6, strong {\n    font-weight: 500;\n  }\n\n  button {\n    cursor: pointer;\n  }\n\n  .react-confirm-alert {\n    margin: 20px;\n  }\n\n  .react-confirm-alert-body {\n    width: auto;\n    h1{\n      font-size: 22px;\n      color: #363f5f;\n      margin-bottom: 10px;\n    }\n\n    .react-confirm-alert-button-group {\n      button:first-child {\n        background: #e83f5b;\n      }\n      button:last-child {\n        background: #fff;\n        color: #3e3b47;\n        border: 1px solid #3e3b47;\n      }\n    }\n  }\n\n\n`;\n","import styled, { css } from 'styled-components';\nimport { defaultTheme } from './styles/theme';\n\ninterface DayEvolutionProps {\n  width: string;\n}\n\ninterface WidthProps {\n  width: number;\n}\n\ninterface SquareProps {\n  color: string;\n}\n\nexport const Container = styled.div`\n  display: block;\n  margin: auto auto;\n`;\n\nexport const Content = styled.div`\n  display: block;\n  margin: auto auto;\n`;\n\nexport const Square = styled.span<SquareProps>`\n  height: 10px;\n  width: 10px;\n  background-color: #555;\n  margin-right: 5px;\n  background-color: ${(props) => props.color};\n\n  ${(props) =>\n    props.color === '0' &&\n    css`\n      background-color: ${defaultTheme.colors.completed};\n    `}\n  ${(props) =>\n    props.color === '1' &&\n    css`\n      background-color: ${defaultTheme.colors.inprogress};\n    `}\n  ${(props) =>\n    props.color === '2' &&\n    css`\n      background-color: ${defaultTheme.colors.planned};\n    `}\n`;\n\nexport const SubtitleStyled = styled.div`\n  display: flex;\n  flex-direction: row;\n  color: #737373;\n  margin: auto auto;\n  padding-top: 10px;\n  align-items: center;\n\n  div {\n    margin-right: 20px;\n    font-size: 14px;\n  }\n`;\n\nexport const RowStyled = styled.div<WidthProps>`\n  display: flex;\n  flex-direction: row;\n  width: ${(props) => `${props.width}px`};\n`;\n\nexport const TimelineStyled = styled.div`\n  display: flex;\n  flex-direction: row;\n\n  padding: 50px 30px;\n\n  list-style-type: none;\n  padding: 0;\n  margin: 0;\n`;\n\nexport const ItemDiv = styled.span`\n  color: #fff;\n  background: #737373;\n  display: block;\n  position: relative;\n  padding: 8px 0;\n  line-height: 24px;\n\n  font-size: 24px;\n  width: 7px;\n`;\nexport const Item = styled.span`\n  pointer-events: none;\n  color: #fff;\n  background: #737373;\n  display: block;\n  position: relative;\n  padding: 10px 10px;\n  line-height: 24px;\n\n  font-size: 14px;\n\n  width: 112px;\n`;\n\nexport const DayEvolution = styled.div<DayEvolutionProps>`\n  position: absolute;\n  background: #1ea2cf;\n  display: block;\n  padding: 5px 10px;\n  line-height: 24px;\n  z-index: 9999;\n\n  margin-top: 35px;\n  width: ${(props) => props.width};\n\n  &::before {\n    content: '';\n    position: absolute;\n    border-style: solid;\n    border-color: #1ea2cf transparent;\n    border-width: 0px 6px 12px 6px;\n    bottom: 20px;\n    top: 100%;\n    left: 100%;\n    transform: translateX(-50%);\n  }\n`;\n\nexport const DayEvolutionLabel = styled.div<DayEvolutionProps>`\n  display: flex;\n  justify-content: flex-end;\n  color: #737373;\n  font-size: 16px;\n  margin-left: 20px;\n  margin-top: 15px;\n  width: ${(props) => props.width};\n  font-weight: bold;\n`;\n\nexport const FirstMonthLabel = styled.div`\n  position: absolute;\n  margin-bottom: 10px;\n  margin-left: -45px;\n  text-transform: capitalize;\n  color: #737373;\n  font-size: 16px;\n  font-weight: bold;\n\n  bottom: 5px;\n`;\n\nexport const MonthLabel = styled.div`\n  position: absolute;\n  margin-bottom: 10px;\n  margin-left: 10px;\n  text-transform: capitalize;\n  color: #737373;\n  font-size: 16px;\n  font-weight: bold;\n\n  bottom: 5px;\n`;\n\nexport const DayLabel = styled.div<WidthProps>`\n  margin-bottom: 10px;\n  color: #737373;\n  width: ${(props) => `${props.width}px`};\n`;\nexport const MarginMonth = styled.div`\n  border-left: 1px solid #a1c5e5;\n  height: 40px;\n  margin-top: 20px;\n  margin-left: 3px;\n`;\n\nexport const DayTaskEmpty = styled.div<WidthProps>`\n  width: ${(props) => `${props.width}px`};\n`;\n","import styled, { css } from 'styled-components';\nimport { defaultTheme } from '../../styles/theme';\n\ninterface DayTaskProps {\n  position: number;\n  taskPosition: 'top' | 'bottom';\n}\n\ninterface DayBarProps {\n  width: number;\n  type: 'completed' | 'inprogress' | 'planned';\n  text: boolean;\n}\ninterface MarginProps {\n  position: number;\n  type: 'completed' | 'inprogress' | 'planned';\n  taskPosition: 'top' | 'bottom';\n}\n\ninterface WidthProps {\n  width: number;\n}\n\ninterface DescriptionProps {\n  backgroundColor?: string;\n}\n\nconst marginColorsVariations = {\n  completed: css`\n    border-color: ${defaultTheme.colors.completed};\n  `,\n  inprogress: css`\n    border-color: ${defaultTheme.colors.inprogress};\n  `,\n  planned: css`\n    border-color: ${defaultTheme.colors.planned};\n  `,\n};\n\nconst dayBarColorsVariations = {\n  completed: css`\n    background: ${defaultTheme.colors.completed};\n  `,\n  inprogress: css`\n    background: ${defaultTheme.colors.inprogress};\n  `,\n  planned: css`\n    background: ${defaultTheme.colors.planned};\n  `,\n};\n\nexport const MarginDay = styled.div<MarginProps>`\n  position: absolute;\n  border-left: 1px solid;\n  height: ${(props) => `${props.position + 10}px`};\n  margin-left: 3px;\n\n  ${(props) => marginColorsVariations[props.type || 'planned']}\n\n  ${(props) =>\n    props.taskPosition === 'top' &&\n    css`\n      margin-top: -${props.position - 45}px;\n      height: ${props.position + 15}px;\n    `}\n\n  ${(props) =>\n    props.taskPosition === 'bottom' &&\n    css`\n      margin-top: -40px;\n      height: ${props.position + 80}px;\n    `}\n`;\n\nexport const DayTask = styled.div<DayTaskProps>`\n  position: absolute;\n  margin-left: 6px;\n  color: ${defaultTheme.colors.timeline};\n  width: max-content;\n  font-size: 14px;\n\n  ${(props) =>\n    props.taskPosition === 'top' &&\n    css`\n      margin-top: -${props.position}px;\n    `}\n\n  ${(props) =>\n    props.taskPosition === 'bottom' &&\n    css`\n      margin-top: ${props.position}px;\n    `}\n`;\n\nexport const DayBar = styled.div<DayBarProps>`\n  margin-left: -3px;\n  margin-top: 5px;\n  font-size: 14px;\n\n  ${(props) => dayBarColorsVariations[props.type || 'planned']}\n  display: block;\n  width: ${(props) => `${props.width}px`};\n  position: relative;\n  padding: 3px 2px;\n  line-height: 24px;\n  z-index: 999;\n  color: ${defaultTheme.colors.letters};\n\n  white-space: pre-wrap;\n  display: flex;\n  justify-content: center;\n\n  ${(props) =>\n    props.text &&\n    css`\n      min-width: 60px;\n    `}\n`;\n\nexport const DescDay = styled.div<DescriptionProps>`\n  background: ${defaultTheme.colors.background};\n  color: ${defaultTheme.colors.timeline};\n  font-size: 12px;\n  margin-bottom: 5px;\n  margin-left: 5px;\n\n  position: relative;\n  z-index: 999;\n  width: max-content;\n\n  ${(props) =>\n    props.backgroundColor &&\n    css`\n      background: ${props.backgroundColor};\n    `}\n`;\n\nexport const DescTask = styled.div<DescriptionProps>`\n  background: ${defaultTheme.colors.background};\n  position: relative;\n  z-index: 999;\n  padding: 3px 0;\n  display: flex;\n  align-items: center;\n  width: max-content;\n\n  svg {\n    margin-right: 5px;\n  }\n\n  ${(props) =>\n    props.backgroundColor &&\n    css`\n      background: ${props.backgroundColor};\n    `}\n`;\n\nexport const TaskContent = styled.div<WidthProps>`\n  position: relative;\n  width: ${(props) => `${props.width}px`};\n  /* margin-left: -2px; */\n`;\n","import React from 'react';\nimport { GoCheck, GoPrimitiveDot } from 'react-icons/go';\n\nimport { format, parseISO, isAfter } from 'date-fns';\n\nimport {\n  DayBar,\n  DescDay,\n  DayTask,\n  MarginDay,\n  DescTask,\n  TaskContent,\n} from './styles';\n\ninterface TaskProps {\n  dateBase: Date;\n  startDate: string;\n  finishDate: string;\n  description: string;\n  position: number;\n  qtyDays: number;\n  widthDay: number;\n  widthBar: number;\n  type: 'completed' | 'inprogress' | 'planned';\n  taskPosition: 'top' | 'bottom';\n  daysLabel: string;\n  backgroundColor?: string;\n}\n\nconst Task: React.FC<TaskProps> = ({\n  dateBase,\n  startDate,\n  finishDate,\n  description,\n  position,\n  qtyDays,\n  widthDay,\n  widthBar,\n  type,\n  taskPosition,\n  daysLabel,\n  backgroundColor,\n}) => {\n  return (\n    <TaskContent width={widthDay}>\n      <DayTask position={position} taskPosition={taskPosition}>\n        <DescDay backgroundColor={backgroundColor}>\n          {qtyDays > 1\n            ? `${format(parseISO(startDate), 'dd/MM')} -\n              ${format(parseISO(finishDate), 'dd/MM')}`\n            : format(parseISO(startDate), 'dd/MM')}\n        </DescDay>\n\n        <DayBar type={type} width={widthDay * widthBar} text={qtyDays > 1}>\n          {qtyDays > 1 ? `${qtyDays} ${daysLabel}` : <span> </span>}\n        </DayBar>\n        <DescTask backgroundColor={backgroundColor}>\n          {isAfter(parseISO(finishDate), dateBase) ? (\n            <GoPrimitiveDot />\n          ) : (\n            <GoCheck />\n          )}\n          {description}\n        </DescTask>\n      </DayTask>\n      <MarginDay position={position} type={type} taskPosition={taskPosition} />\n    </TaskContent>\n  );\n};\n\nexport default Task;\n","import React, { Fragment } from 'react';\n\nimport {\n  startOfWeek,\n  addDays,\n  subDays,\n  differenceInDays,\n  format,\n  isEqual,\n  parseISO,\n  isAfter,\n} from 'date-fns';\n\nimport { enUS } from 'date-fns/locale';\nimport { Locale } from 'date-fns';\nimport { defaultTheme } from './styles/theme';\nimport GlobalStyle from './styles/global';\n\nimport {\n  Container,\n  Content,\n  Square,\n  SubtitleStyled,\n  TimelineStyled,\n  Item,\n  ItemDiv,\n  MarginMonth,\n  MonthLabel,\n  DayEvolution,\n  DayEvolutionLabel,\n  DayLabel,\n  FirstMonthLabel,\n  DayTaskEmpty,\n  RowStyled,\n} from './styles';\n\nimport Task from './components/Task';\n\nexport interface IPositionTask {\n  line: number;\n  nextDate: Date;\n}\n\nexport interface ITask {\n  id: string;\n  startDate: string;\n  finishDate: string;\n  description: string;\n}\n\ninterface ITaskFormatted {\n  id: string;\n  startDate: string;\n  finishDate: string;\n  description: string;\n  qtyDays: number;\n  widthBar: number;\n  type: 'completed' | 'inprogress' | 'planned';\n  position: number;\n}\n\nexport interface ITimeline {\n  dateBase: Date;\n  totPeriods: number;\n  weeksPerPeriod: number;\n  position: 'top' | 'bottom' | 'both';\n  tasks: ITask[] | undefined;\n  typeDraw: 'inline' | 'rising';\n  locale?: Locale;\n  labels?: string[];\n  daysLabel?: string;\n  backgroundColor?: string;\n}\n\nconst Timeline: React.FC<ITimeline> = ({\n  dateBase,\n  totPeriods,\n  weeksPerPeriod,\n  position,\n  tasks,\n  typeDraw,\n  locale,\n  labels,\n  daysLabel,\n  backgroundColor,\n}) => {\n  const currentLocale = locale || enUS;\n  const currentLabels = labels || [\n    'Finished',\n    'Under Development',\n    'Not Started',\n  ];\n\n  const currentDaysLabel = daysLabel || 'days';\n  const background = backgroundColor || defaultTheme.colors.background;\n\n  const daysPerPeriods = weeksPerPeriod * 7;\n  const widthDay = 17 / weeksPerPeriod;\n\n  const firstMon = addDays(startOfWeek(dateBase), 1);\n  const firstDate = subDays(startOfWeek(firstMon), 27 * weeksPerPeriod);\n\n  const datesBase: Date[] = [];\n  const rangeDates: Date[] = [];\n\n  const tasks1: ITask[] = [];\n  const tasks2: ITask[] = [];\n\n  if (tasks !== undefined) {\n    switch (position) {\n      case 'both':\n        for (let i = 0; i < tasks.length; i++) {\n          if (i % 2 === 0) {\n            tasks1.push(tasks[i]);\n          } else {\n            tasks2.push(tasks[i]);\n          }\n        }\n        break;\n      case 'top':\n        for (let i = 0; i < tasks.length; i++) {\n          tasks1.push(tasks[i]);\n        }\n        break;\n      case 'bottom':\n        for (let i = 0; i < tasks.length; i++) {\n          tasks2.push(tasks[i]);\n        }\n        break;\n      default:\n        for (let i = 0; i < tasks.length; i++) {\n          if (i % 2 === 0) {\n            tasks1.push(tasks[i]);\n          } else {\n            tasks2.push(tasks[i]);\n          }\n        }\n        break;\n    }\n  }\n\n  let date = firstDate;\n  datesBase.push(date);\n  for (let i = 1; i <= totPeriods; i++) {\n    const newDate = addDays(date, daysPerPeriods);\n    datesBase.push(newDate);\n    date = newDate;\n  }\n  // console.log('datesBase', datesBase);\n\n  const diff = differenceInDays(dateBase, firstDate);\n  const totEvol = `${widthDay * diff + 4}px`;\n\n  const lastDate = addDays(datesBase[datesBase.length - 1], daysPerPeriods);\n  const lastDrawingDate = addDays(lastDate, 4);\n  // console.log('lastDate', lastDate);\n  const diffTotal = differenceInDays(lastDate, firstDate) + 1;\n\n  let newDate = firstDate;\n  for (let i = 1; i < diffTotal; i++) {\n    rangeDates.push(newDate);\n    newDate = addDays(newDate, 1);\n  }\n\n  const nextDate = (qtyDays: number): Date => {\n    return addDays(firstDate, qtyDays);\n  };\n\n  const formatTask = (\n    listTasks: ITask[],\n    positionTask: string,\n  ): ITaskFormatted[] => {\n    const listTaskFormatted: ITaskFormatted[] = [];\n    const heigh = positionTask === 'top' ? 90 : 80;\n    const spaceInitial = positionTask === 'top' ? 60 : 20;\n\n    const positionsTasks: IPositionTask[] = [];\n\n    let line = 0;\n    let pos = 0;\n    for (let i = 1; i < diffTotal; i++) {\n      const processDate = nextDate(i - 1);\n      const selectedTask = listTasks.find((item) =>\n        isEqual(parseISO(item.startDate), processDate),\n      );\n      if (selectedTask) {\n        const qtyDays =\n          differenceInDays(\n            parseISO(selectedTask.finishDate),\n            parseISO(selectedTask.startDate),\n          ) === 0\n            ? 1\n            : differenceInDays(\n                parseISO(selectedTask.finishDate),\n                parseISO(selectedTask.startDate),\n              );\n        const widthBar = isAfter(\n          parseISO(selectedTask.finishDate),\n          lastDrawingDate,\n        )\n          ? differenceInDays(lastDrawingDate, parseISO(selectedTask.startDate))\n          : qtyDays;\n\n        let type: 'completed' | 'inprogress' | 'planned';\n        if (isAfter(parseISO(selectedTask.startDate), dateBase)) {\n          type = 'planned';\n        } else if (!isAfter(parseISO(selectedTask.finishDate), dateBase)) {\n          type = 'completed';\n        } else {\n          type = 'inprogress';\n        }\n\n        if (typeDraw === 'inline') {\n          const lenDesc = Math.ceil(\n            (selectedTask.description.length * 7) / widthDay,\n          );\n          const lenNext = lenDesc > widthBar ? lenDesc : widthBar;\n          if (positionsTasks.length === 0) {\n            line = 0;\n            positionsTasks.push({\n              line,\n              nextDate: addDays(parseISO(selectedTask.startDate), lenNext),\n            });\n          } else {\n            const totPositions = positionsTasks.length;\n            let found = false;\n            for (let j = 0; j < totPositions; j++) {\n              const item = positionsTasks[j];\n              if (isAfter(parseISO(selectedTask.startDate), item.nextDate)) {\n                line = item.line;\n                positionsTasks[j].nextDate = addDays(\n                  parseISO(selectedTask.startDate),\n                  lenNext,\n                );\n                j = positionsTasks.length + 1;\n                found = true;\n              }\n            }\n            if (!found) {\n              line++;\n              positionsTasks.push({\n                line,\n                nextDate: addDays(parseISO(selectedTask.startDate), lenNext),\n              });\n            }\n          }\n          pos = line * heigh + spaceInitial;\n        } else {\n          pos = line * heigh + spaceInitial;\n          line++;\n        }\n        // const pos = line * heigh + spaceInitial;\n        // line = typeDraw === 'rising' ? line + 1 : 0;\n\n        listTaskFormatted.push({\n          id: i.toString(),\n          startDate: selectedTask.startDate,\n          finishDate: selectedTask.finishDate,\n          description: selectedTask.description,\n          qtyDays,\n          widthBar,\n          type,\n          position: pos,\n        });\n      } else {\n        listTaskFormatted.push({\n          id: i.toString(),\n          startDate: '',\n          finishDate: '',\n          description: '',\n          qtyDays: 0,\n          widthBar: 0,\n          type: 'planned',\n          position: 0,\n        });\n      }\n    }\n\n    // console.log('listTaskFormatted', listTaskFormatted);\n    // console.log('positionsTasks', positionsTasks);\n    return listTaskFormatted;\n  };\n\n  const listTasks1 = formatTask(tasks1, 'top');\n  const listTasks2 = formatTask(tasks2, 'bottom');\n\n  // console.log('listTasks1', listTasks1);\n  // console.log('listTasks2', listTasks2);\n\n  const maxTopPosition = listTasks1.reduce<number>(\n    (tot, item) => (item.position > tot ? item.position : tot),\n    0,\n  );\n\n  const maxBottomPosition = listTasks2.reduce<number>(\n    (tot, item) => (item.position > tot ? item.position : tot),\n    0,\n  );\n\n  const spacesDraw = position === 'top' ? 250 : 300;\n  const totalHeigh = maxTopPosition + maxBottomPosition + spacesDraw;\n\n  const marginTop = maxTopPosition + 30;\n\n  const widthContainer = totPeriods * 119 + 150;\n\n  return (\n    <Container style={{ height: totalHeigh, backgroundColor: background }}>\n      <SubtitleStyled style={{ maxWidth: widthContainer }}>\n        {currentLabels.map((item, key) => (\n          <Fragment key={key}>\n            <Square color={key.toString()} /> <div>{item}</div>\n          </Fragment>\n        ))}\n      </SubtitleStyled>\n\n      <Content style={{ marginTop, maxWidth: widthContainer }}>\n        <RowStyled width={widthContainer}>\n          {listTasks1.map((item, key) => {\n            if (item.startDate !== '') {\n              return (\n                <Task\n                  key={key}\n                  dateBase={dateBase}\n                  startDate={item.startDate}\n                  finishDate={item.finishDate}\n                  description={item.description}\n                  widthBar={item.widthBar}\n                  qtyDays={item.qtyDays}\n                  type={item.type}\n                  position={item.position}\n                  widthDay={widthDay}\n                  taskPosition=\"top\"\n                  daysLabel={currentDaysLabel}\n                  backgroundColor={backgroundColor}\n                />\n              );\n            }\n            return <DayTaskEmpty key={key} width={widthDay} />;\n          })}\n        </RowStyled>\n        <RowStyled width={widthContainer}>\n          {datesBase[0].getDate() !== 1 && (\n            <div style={{ position: 'relative' }}>\n              <FirstMonthLabel>\n                {format(datesBase[0], 'MMMM', { locale: currentLocale })}\n              </FirstMonthLabel>\n            </div>\n          )}\n\n          {rangeDates.map((item, key) => {\n            if (item.getDate() === 1) {\n              return (\n                <div\n                  key={key}\n                  style={{ position: 'relative', width: widthDay }}\n                >\n                  <MarginMonth />\n                  <MonthLabel>\n                    {format(item, 'MMMM', { locale: currentLocale })}\n                  </MonthLabel>\n                </div>\n              );\n            }\n            return <DayLabel key={key} width={widthDay} />;\n          })}\n        </RowStyled>\n\n        <TimelineStyled>\n          {datesBase.map((item, key) => (\n            <div\n              key={item.getDate()}\n              style={{ display: 'flex', flexDirection: 'row', zIndex: 999 }}\n            >\n              <ItemDiv> {key !== 0 && '|'} </ItemDiv>\n              <Item> {item.getDate()}</Item>\n              {/* {key === datesBase.length - 1 && <ItemDiv> </ItemDiv>} */}\n            </div>\n          ))}\n          <DayEvolution width={totEvol} />\n        </TimelineStyled>\n        <DayEvolutionLabel width={totEvol}>\n          {format(dateBase, 'dd/MM')}\n        </DayEvolutionLabel>\n\n        <RowStyled width={widthContainer}>\n          {listTasks2.map((item, key) => {\n            if (item.startDate !== '') {\n              return (\n                <Task\n                  key={key}\n                  dateBase={dateBase}\n                  startDate={item.startDate}\n                  finishDate={item.finishDate}\n                  description={item.description}\n                  widthBar={item.widthBar}\n                  qtyDays={item.qtyDays}\n                  type={item.type}\n                  position={item.position}\n                  widthDay={widthDay}\n                  taskPosition=\"bottom\"\n                  daysLabel={currentDaysLabel}\n                  backgroundColor={backgroundColor}\n                />\n              );\n            }\n            return <DayTaskEmpty key={key} width={widthDay} />;\n          })}\n        </RowStyled>\n      </Content>\n      <GlobalStyle />\n    </Container>\n  );\n};\n\nexport default Timeline;\n","import  { ITask } from 'react-timeline'\n\nexport const tasks: ITask[] = [\n  {\n    id: '1',\n    startDate: '2020-06-29',\n    finishDate: '2020-06-29',\n    description: 'Lorem ipsum dolor sit amet, consectetur',\n  },\n  {\n    id: '2',\n    startDate: '2020-07-01',\n    finishDate: '2020-08-10',\n    description: 'Excepteur sint occaecat',\n  },\n  {\n    id: '3',\n    startDate: '2020-07-10',\n    finishDate: '2020-07-10',\n    description: 'Duis aute irure dolor',\n  },\n  {\n    id: '4',\n    startDate: '2020-07-06',\n    finishDate: '2020-07-15',\n    description: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit',\n  },\n  {\n    id: '5',\n    startDate: '2020-07-20',\n    finishDate: '2020-07-24',\n    description: 'Sed ut perspiciatis unde omnis iste natus error',\n  },\n  {\n    id: '6',\n    startDate: '2020-08-10',\n    finishDate: '2020-08-13',\n    description: 'Nemo enim ipsam voluptatem',\n  },\n];\n\nexport const tasks2: ITask[] = [\n  {\n    id: '1',\n    startDate: '2020-04-27',\n    finishDate: '2020-05-08',\n    description: 'Sprint 10',\n  },\n  {\n    id: '2',\n    startDate: '2020-05-11',\n    finishDate: '2020-05-15',\n    description: 'PI Planning II',\n  },\n  {\n    id: '3',\n    startDate: '2020-05-18',\n    finishDate: '2020-06-04',\n    description: 'Sprint 11',\n  },\n  {\n    id: '4',\n    startDate: '2020-06-05',\n    finishDate: '2020-06-18',\n    description: 'Sprint 12',\n  },\n  {\n    id: '5',\n    startDate: '2020-06-19',\n    finishDate: '2020-07-02',\n    description: 'Sprint 13',\n  },\n  {\n    id: '6',\n    startDate: '2020-07-03',\n    finishDate: '2020-07-16',\n    description: 'Sprint 14',\n  },\n  {\n    id: '7',\n    startDate: '2020-07-17',\n    finishDate: '2020-07-30',\n    description: 'Sprint 15',\n  },\n  {\n    id: '8',\n    startDate: '2020-07-31',\n    finishDate: '2020-08-13',\n    description: 'Sprint 16',\n  },\n  {\n    id: '9',\n    startDate: '2020-08-14',\n    finishDate: '2020-08-27',\n    description: 'Sprint 17',\n  },\n];\n\nexport const tasks3: ITask[] = [\n  {\n    id: \"1\",\n    startDate: \"2020-10-19\",\n    finishDate: \"2020-11-02\",\n    description: \"Sprint 1\"\n  },\n  {\n    id: \"2\",\n    startDate: \"2020-11-02\",\n    finishDate: \"2020-11-15\",\n    description: \"Sprint 2\"\n  },\n  {\n    id: \"3\",\n    startDate: \"2020-11-16\",\n    finishDate: \"2020-11-29\",\n    description: \"Sprint 3\"\n  },\n  {\n    id: \"4\",\n    startDate: \"2020-11-30\",\n    finishDate: \"2020-12-13\",\n    description: \"Sprint 4\"\n  }\n]\n\n","import React from 'react'\n\nimport Timeline from 'react-timeline'\n\nimport { tasks } from './test/tasks'\n\nconst dateBase = new Date(2020, 6, 15);\n\nconst App = () => {\n  return (\n\n    <>\n        <Timeline\n          dateBase={dateBase}\n          totPeriods={9}\n          weeksPerPeriod={1}\n          position='both'\n          typeDraw='inline'\n          tasks={tasks}\n          // backgroundColor=\"#fff\"\n        />\n        <Timeline\n          dateBase={dateBase}\n          totPeriods={9}\n          weeksPerPeriod={1}\n          position='top'\n          typeDraw='inline'\n          tasks={tasks}\n          backgroundColor=\"#fff\"\n        />\n        <Timeline\n          dateBase={dateBase}\n          totPeriods={9}\n          weeksPerPeriod={1}\n          position='bottom'\n          typeDraw='inline'\n          tasks={tasks}\n          backgroundColor=\"#fff\"\n        />\n    </>\n  )\n\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}